{
  "stats": {
    "suites": 4,
    "tests": 59,
    "passes": 59,
    "pending": 0,
    "failures": 0,
    "start": "2024-03-31T17:05:17.480Z",
    "end": "2024-03-31T17:05:17.648Z",
    "duration": 168,
    "testsRegistered": 59,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "255bc48b-ab71-482a-9b83-b048de4756c6",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "18fa27b1-91c7-48b6-b0e6-d48e825a261b",
          "title": "getEvenNumbersFromArray",
          "fullFile": "/Users/a222/WebstormProjects/unitTest/test/numbers-validator/getEvenNumbersFromArray.spec.js",
          "file": "/test/numbers-validator/getEvenNumbersFromArray.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"getEvenNumbersFromArray\"",
              "fullTitle": "getEvenNumbersFromArray \"before each\" hook in \"getEvenNumbersFromArray\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "0755db3a-ff24-4956-b30b-adcd2b756c0f",
              "parentUUID": "18fa27b1-91c7-48b6-b0e6-d48e825a261b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"getEvenNumbersFromArray\"",
              "fullTitle": "getEvenNumbersFromArray \"after each\" hook in \"getEvenNumbersFromArray\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "70681ec5-9334-4cbc-bac7-2d0f432a5e82",
              "parentUUID": "18fa27b1-91c7-48b6-b0e6-d48e825a261b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "it should return an array of even number",
              "fullTitle": "getEvenNumbersFromArray it should return an array of even number",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayNumber = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst arrayNumberResult = validator.getEvenNumbersFromArray(arrayNumber);\nexpect(arrayNumberResult).to.be.deep.eq([2, 4, 6, 8]);",
              "err": {},
              "uuid": "af901967-1028-451f-a21e-0c83a72a55c0",
              "parentUUID": "18fa27b1-91c7-48b6-b0e6-d48e825a261b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "it should return an array of even number",
              "fullTitle": "getEvenNumbersFromArray it should return an array of even number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayNumber = [-2, -0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 9990];\nconst arrayNumberResult = validator.getEvenNumbersFromArray(arrayNumber);\nexpect(arrayNumberResult).to.be.deep.eq([-2, -0, 0, 2, 4, 6, 8, 10, 9990]);",
              "err": {},
              "uuid": "a86ded2c-3aba-49ae-b08f-51e1b51842ef",
              "parentUUID": "18fa27b1-91c7-48b6-b0e6-d48e825a261b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "it should return an array of even number",
              "fullTitle": "getEvenNumbersFromArray it should return an array of even number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayNumber = [-2, -0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 9990];\nconst arrayNumberResult = validator.getEvenNumbersFromArray(arrayNumber);\nexpect(arrayNumberResult)\n    .to.have.all.members([-2, -0, 0, 2, 4, 6, 8, 10, 9990]);",
              "err": {},
              "uuid": "2e5710e5-5209-4429-af86-f3bfeba5319e",
              "parentUUID": "18fa27b1-91c7-48b6-b0e6-d48e825a261b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "it should return an empty array",
              "fullTitle": "getEvenNumbersFromArray it should return an empty array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const emptyArrayResult = validator.getEvenNumbersFromArray([]);\nexpect(emptyArrayResult).to.be.eql([]);",
              "err": {},
              "uuid": "d88617c4-6ff2-4bba-beba-c2fe1547877c",
              "parentUUID": "18fa27b1-91c7-48b6-b0e6-d48e825a261b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an array of even numbers for negative numbers",
              "fullTitle": "getEvenNumbersFromArray should return an array of even numbers for negative numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayNumber = [-9, -8, -7, -6, -5, -4, -3, -2, -1];\nconst arrayNumberResult = validator.getEvenNumbersFromArray(arrayNumber);\nexpect(arrayNumberResult).to.be.deep.eq([-8, -6, -4, -2]);",
              "err": {},
              "uuid": "ed0013bb-e905-42f1-9702-5222049854d7",
              "parentUUID": "18fa27b1-91c7-48b6-b0e6-d48e825a261b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an array of even numbers for decimal numbers",
              "fullTitle": "getEvenNumbersFromArray should return an array of even numbers for decimal numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayNumber = [1.5, 2, 3.8, 4.3, 5.6];\nconst arrayNumberResult = validator.getEvenNumbersFromArray(arrayNumber);\nexpect(arrayNumberResult).to.be.deep.eq([2]);",
              "err": {},
              "uuid": "b2e7b77b-a15d-4d47-8159-944eea405b2c",
              "parentUUID": "18fa27b1-91c7-48b6-b0e6-d48e825a261b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array when provided NaN and Infinity",
              "fullTitle": "getEvenNumbersFromArray should return an empty array when provided NaN and Infinity",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayNumber = [NaN, Infinity];\nconst arrayNumberResult = validator.getEvenNumbersFromArray(arrayNumber);\nexpect(arrayNumberResult).to.eql([]);",
              "err": {},
              "uuid": "178d3dea-564b-4fef-955d-bb057ad489ab",
              "parentUUID": "18fa27b1-91c7-48b6-b0e6-d48e825a261b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided string in array",
              "fullTitle": "getEvenNumbersFromArray should throw an error when provided string in array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayNumber = [1, '2', 3, 4, 5, 6, 7, 8, 9];\nexpect(() => {\n  validator.getEvenNumbersFromArray(arrayNumber);\n}).to.throw(`[${arrayNumber}] is not an array of \"Numbers\"`);",
              "err": {},
              "uuid": "39c61407-6bf9-4f6e-a889-295bff02410d",
              "parentUUID": "18fa27b1-91c7-48b6-b0e6-d48e825a261b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided mixed value in array",
              "fullTitle": "getEvenNumbersFromArray should throw an error when provided mixed value in array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayNumber = [1, '2', 3, true, 5, 6, false, null, {value: 9}];\nexpect(() => {\n  validator.getEvenNumbersFromArray(arrayNumber);\n}).to.throw(\n    `[${arrayNumber}] is not an array of \"Numbers\"`,\n);",
              "err": {},
              "uuid": "4e84f865-d92e-4b8e-ad25-56434c06f323",
              "parentUUID": "18fa27b1-91c7-48b6-b0e6-d48e825a261b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "af901967-1028-451f-a21e-0c83a72a55c0",
            "a86ded2c-3aba-49ae-b08f-51e1b51842ef",
            "2e5710e5-5209-4429-af86-f3bfeba5319e",
            "d88617c4-6ff2-4bba-beba-c2fe1547877c",
            "ed0013bb-e905-42f1-9702-5222049854d7",
            "b2e7b77b-a15d-4d47-8159-944eea405b2c",
            "178d3dea-564b-4fef-955d-bb057ad489ab",
            "39c61407-6bf9-4f6e-a889-295bff02410d",
            "4e84f865-d92e-4b8e-ad25-56434c06f323"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1903334a-d56b-4386-ba89-350503e8dab8",
          "title": "isAllNumbers",
          "fullFile": "/Users/a222/WebstormProjects/unitTest/test/numbers-validator/isAllNumbers.spec.js",
          "file": "/test/numbers-validator/isAllNumbers.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isAllNumbers\"",
              "fullTitle": "isAllNumbers \"before each\" hook in \"isAllNumbers\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "ed73db5e-25a3-48a1-a048-c01afc304497",
              "parentUUID": "1903334a-d56b-4386-ba89-350503e8dab8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isAllNumbers\"",
              "fullTitle": "isAllNumbers \"after each\" hook in \"isAllNumbers\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "85f149d4-85a2-4618-b432-fbab9550f6fd",
              "parentUUID": "1903334a-d56b-4386-ba89-350503e8dab8",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true when provided array with number",
              "fullTitle": "isAllNumbers should return true when provided array with number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayNumber = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst arrayNumberResult = validator.isAllNumbers(arrayNumber);\nexpect(arrayNumberResult).to.be.true;",
              "err": {},
              "uuid": "f44c2487-2a72-4f4b-b837-147cc647eba9",
              "parentUUID": "1903334a-d56b-4386-ba89-350503e8dab8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true when provided an empty array",
              "fullTitle": "isAllNumbers should return true when provided an empty array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const emptyArray = [];\nconst result = validator.isAllNumbers(emptyArray);\nexpect(result).to.be.true;",
              "err": {},
              "uuid": "3c662d8c-6e4b-426d-9982-b6bbe3b57bc7",
              "parentUUID": "1903334a-d56b-4386-ba89-350503e8dab8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true when provided an array with empty elements",
              "fullTitle": "isAllNumbers should return true when provided an array with empty elements",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayWithEmptyElements = [1, 2, , 4, 5];\nconst result = validator.isAllNumbers(arrayWithEmptyElements);\nexpect(result).to.be.true;",
              "err": {},
              "uuid": "8f446cd8-4a76-40af-9cb4-6c9cca9246e2",
              "parentUUID": "1903334a-d56b-4386-ba89-350503e8dab8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true when provided an array with zero elements",
              "fullTitle": "isAllNumbers should return true when provided an array with zero elements",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayWithZeroElements = [1, 2, 0, 4, 5];\nconst result = validator.isAllNumbers(arrayWithZeroElements);\nexpect(result).to.be.true;",
              "err": {},
              "uuid": "1b85f31a-be5d-4b1d-ae3a-6ee1acfd0648",
              "parentUUID": "1903334a-d56b-4386-ba89-350503e8dab8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true when provided an array with negative numbers",
              "fullTitle": "isAllNumbers should return true when provided an array with negative numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayNegativeNumbers = [-1, -2, -3, -4, -5];\nconst result = validator.isAllNumbers(arrayNegativeNumbers);\nexpect(result).to.be.true;",
              "err": {},
              "uuid": "c50aa763-f3d4-4aa2-992f-97240cfcd0a9",
              "parentUUID": "1903334a-d56b-4386-ba89-350503e8dab8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true when provided an array with decimal numbers",
              "fullTitle": "isAllNumbers should return true when provided an array with decimal numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayDecimalNumbers = [1.5, 2.7, 3.8, 4.1, 5.9];\nconst result = validator.isAllNumbers(arrayDecimalNumbers);\nexpect(result).to.be.true;",
              "err": {},
              "uuid": "e57b6919-6b7a-40f8-a9e9-ea3b34953c76",
              "parentUUID": "1903334a-d56b-4386-ba89-350503e8dab8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false when provided an array with mixed data types",
              "fullTitle": "isAllNumbers should return false when provided an array with mixed data types",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mixedArray = [1, '2', 3, 4, true];\nconst result = validator.isAllNumbers(mixedArray);\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "e0f19506-4afa-4907-80c9-e016ff141df0",
              "parentUUID": "1903334a-d56b-4386-ba89-350503e8dab8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided null",
              "fullTitle": "isAllNumbers should throw an error when provided null",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() =>\n  validator.isAllNumbers(null)).to.throw('[null] is not an array');",
              "err": {},
              "uuid": "556af7aa-d1f4-4a07-a2c8-1bc42ea0abc0",
              "parentUUID": "1903334a-d56b-4386-ba89-350503e8dab8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided boolean",
              "fullTitle": "isAllNumbers should throw an error when provided boolean",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() =>\n  validator.isAllNumbers(true)).to.throw('[true] is not an array');",
              "err": {},
              "uuid": "6de98f5c-8fdd-45b2-afd4-f6fd2b8b25ca",
              "parentUUID": "1903334a-d56b-4386-ba89-350503e8dab8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided undefined",
              "fullTitle": "isAllNumbers should throw an error when provided undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() =>\n  validator.isAllNumbers(undefined))\n    .to.throw('[undefined] is not an array');",
              "err": {},
              "uuid": "73aab67e-9267-41f6-ac21-c79625a3ab31",
              "parentUUID": "1903334a-d56b-4386-ba89-350503e8dab8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided object",
              "fullTitle": "isAllNumbers should throw an error when provided object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const emptyObject = {};\nexpect(() =>\n  validator.isAllNumbers(emptyObject))\n    .to.throw('[[object Object]] is not an array');",
              "err": {},
              "uuid": "331d902f-1d24-41af-a794-190e167ac401",
              "parentUUID": "1903334a-d56b-4386-ba89-350503e8dab8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided string",
              "fullTitle": "isAllNumbers should throw an error when provided string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayNumber = '2';\nexpect(() =>\n  validator.isAllNumbers(arrayNumber))\n    .to.throw(`[${arrayNumber}] is not an array`);",
              "err": {},
              "uuid": "e3ca5625-02cd-4c5d-98b3-0e0f4d205d5f",
              "parentUUID": "1903334a-d56b-4386-ba89-350503e8dab8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided nothing",
              "fullTitle": "isAllNumbers should throw an error when provided nothing",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() =>\n  validator.isAllNumbers()).to.throw('[undefined] is not an array');",
              "err": {},
              "uuid": "fd9759d7-0cbb-4179-9c6d-be54f9dee0a1",
              "parentUUID": "1903334a-d56b-4386-ba89-350503e8dab8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f44c2487-2a72-4f4b-b837-147cc647eba9",
            "3c662d8c-6e4b-426d-9982-b6bbe3b57bc7",
            "8f446cd8-4a76-40af-9cb4-6c9cca9246e2",
            "1b85f31a-be5d-4b1d-ae3a-6ee1acfd0648",
            "c50aa763-f3d4-4aa2-992f-97240cfcd0a9",
            "e57b6919-6b7a-40f8-a9e9-ea3b34953c76",
            "e0f19506-4afa-4907-80c9-e016ff141df0",
            "556af7aa-d1f4-4a07-a2c8-1bc42ea0abc0",
            "6de98f5c-8fdd-45b2-afd4-f6fd2b8b25ca",
            "73aab67e-9267-41f6-ac21-c79625a3ab31",
            "331d902f-1d24-41af-a794-190e167ac401",
            "e3ca5625-02cd-4c5d-98b3-0e0f4d205d5f",
            "fd9759d7-0cbb-4179-9c6d-be54f9dee0a1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "146412b1-0e2b-4211-a387-cdcf2caa8ad1",
          "title": "isInteger",
          "fullFile": "/Users/a222/WebstormProjects/unitTest/test/numbers-validator/isInteger.spec.js",
          "file": "/test/numbers-validator/isInteger.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isInteger\"",
              "fullTitle": "isInteger \"before each\" hook in \"isInteger\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "4a591305-6c50-4d25-b3bc-c40c296e8b31",
              "parentUUID": "146412b1-0e2b-4211-a387-cdcf2caa8ad1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isInteger\"",
              "fullTitle": "isInteger \"after each\" hook in \"isInteger\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "ad095177-9641-4a45-8950-e68241d9153b",
              "parentUUID": "146412b1-0e2b-4211-a387-cdcf2caa8ad1",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true if input is an integer",
              "fullTitle": "isInteger should return true if input is an integer",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = 42;\nexpect(validator.isInteger(input)).to.be.true;",
              "err": {},
              "uuid": "aff7ff46-e157-40f3-8eab-3f3d66ee036c",
              "parentUUID": "146412b1-0e2b-4211-a387-cdcf2caa8ad1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true if input is a negative integer",
              "fullTitle": "isInteger should return true if input is a negative integer",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = -42;\nexpect(validator.isInteger(input)).to.be.true;",
              "err": {},
              "uuid": "c901e0a4-1743-42d1-b8a9-7b1ca31a58ea",
              "parentUUID": "146412b1-0e2b-4211-a387-cdcf2caa8ad1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true if input is zero",
              "fullTitle": "isInteger should return true if input is zero",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = 0;\nexpect(validator.isInteger(input)).to.be.true;",
              "err": {},
              "uuid": "3a869c09-17b0-4d46-a514-48d8ba7c9f59",
              "parentUUID": "146412b1-0e2b-4211-a387-cdcf2caa8ad1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true if input is -0",
              "fullTitle": "isInteger should return true if input is -0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = -0;\nexpect(validator.isInteger(input)).to.be.true;",
              "err": {},
              "uuid": "d875215e-4a61-4354-9b7c-a65a8999f2f4",
              "parentUUID": "146412b1-0e2b-4211-a387-cdcf2caa8ad1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for large integer",
              "fullTitle": "isInteger should return true for large integer",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = 9007199254740992;\nexpect(validator.isInteger(input)).to.be.true;",
              "err": {},
              "uuid": "c1d81d1e-c1ec-43e9-a416-53cc2905cbb7",
              "parentUUID": "146412b1-0e2b-4211-a387-cdcf2caa8ad1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if input is a decimal number",
              "fullTitle": "isInteger should return false if input is a decimal number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = 3.14;\nexpect(validator.isInteger(input)).to.be.false;",
              "err": {},
              "uuid": "369091bb-2b2a-4846-9744-002456b84fe6",
              "parentUUID": "146412b1-0e2b-4211-a387-cdcf2caa8ad1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if input is an object",
              "fullTitle": "isInteger should throw an error if input is an object",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = {value: 42};\nexpect(() => validator.isInteger(input))\n    .to.throw(Error, `[${input}] is not a number`);",
              "err": {},
              "uuid": "344afc62-abbb-45d1-abf2-3aa10552fea2",
              "parentUUID": "146412b1-0e2b-4211-a387-cdcf2caa8ad1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if input is an array",
              "fullTitle": "isInteger should throw an error if input is an array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = [42];\nexpect(() => validator.isInteger(input))\n    .to.throw(Error, `[${input}] is not a number`);",
              "err": {},
              "uuid": "0a89e92f-d50f-4742-a395-1177c0196565",
              "parentUUID": "146412b1-0e2b-4211-a387-cdcf2caa8ad1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if input is not a number",
              "fullTitle": "isInteger should throw an error if input is not a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = 'not a number';\nexpect(() =>\n  validator.isInteger(input)).to.throw(Error, `[${input}] is not a number`);",
              "err": {},
              "uuid": "9caf22d1-8fbf-4062-9d76-01f4e94f0c88",
              "parentUUID": "146412b1-0e2b-4211-a387-cdcf2caa8ad1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if input is Infinity",
              "fullTitle": "isInteger should return false if input is Infinity",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(validator.isInteger(Infinity)).to.be.false;",
              "err": {},
              "uuid": "afc7a0c0-55d3-433e-99d4-6d4e17e3ef43",
              "parentUUID": "146412b1-0e2b-4211-a387-cdcf2caa8ad1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "aff7ff46-e157-40f3-8eab-3f3d66ee036c",
            "c901e0a4-1743-42d1-b8a9-7b1ca31a58ea",
            "3a869c09-17b0-4d46-a514-48d8ba7c9f59",
            "d875215e-4a61-4354-9b7c-a65a8999f2f4",
            "c1d81d1e-c1ec-43e9-a416-53cc2905cbb7",
            "369091bb-2b2a-4846-9744-002456b84fe6",
            "344afc62-abbb-45d1-abf2-3aa10552fea2",
            "0a89e92f-d50f-4742-a395-1177c0196565",
            "9caf22d1-8fbf-4062-9d76-01f4e94f0c88",
            "afc7a0c0-55d3-433e-99d4-6d4e17e3ef43"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e8a3ff52-37f8-46a0-93d9-2aebfe55dacc",
          "title": "isNumberEven",
          "fullFile": "/Users/a222/WebstormProjects/unitTest/test/numbers-validator/isNumberEven.spec.js",
          "file": "/test/numbers-validator/isNumberEven.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isNumberEven\"",
              "fullTitle": "isNumberEven \"before each\" hook in \"isNumberEven\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "34cab2c8-ae21-4e57-9303-615e370bc040",
              "parentUUID": "e8a3ff52-37f8-46a0-93d9-2aebfe55dacc",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isNumberEven\"",
              "fullTitle": "isNumberEven \"after each\" hook in \"isNumberEven\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "db9a2210-9c77-4506-9b3a-530ea0cadb0b",
              "parentUUID": "e8a3ff52-37f8-46a0-93d9-2aebfe55dacc",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true when provided with an even number",
              "fullTitle": "isNumberEven should return true when provided with an even number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(4);\nexpect(validationResults).to.be.true;",
              "err": {},
              "uuid": "27b2e916-e7b9-409f-bf39-91c4357a4aa2",
              "parentUUID": "e8a3ff52-37f8-46a0-93d9-2aebfe55dacc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true when provided with an even decimal number",
              "fullTitle": "isNumberEven should return true when provided with an even decimal number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(50);\nexpect(validationResults).to.be.true;",
              "err": {},
              "uuid": "fe22105d-53f7-4f10-997f-b0ee7a0fd113",
              "parentUUID": "e8a3ff52-37f8-46a0-93d9-2aebfe55dacc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true when provided with an even number more 100",
              "fullTitle": "isNumberEven should return true when provided with an even number more 100",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(102);\nexpect(validationResults).to.be.true;",
              "err": {},
              "uuid": "fbce49b5-9dbd-4521-983d-5f48c0de8c72",
              "parentUUID": "e8a3ff52-37f8-46a0-93d9-2aebfe55dacc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for large even number (1000000000000000)",
              "fullTitle": "isNumberEven should return true for large even number (1000000000000000)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(1000000000000000);\nexpect(validationResults).to.be.true;",
              "err": {},
              "uuid": "e4a6356f-76d3-4029-b863-56d90553fad4",
              "parentUUID": "e8a3ff52-37f8-46a0-93d9-2aebfe55dacc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for zero",
              "fullTitle": "isNumberEven should return true for zero",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(0);\nexpect(validationResults).to.be.true;",
              "err": {},
              "uuid": "0494955c-a658-4701-91d9-dc2eadd10568",
              "parentUUID": "e8a3ff52-37f8-46a0-93d9-2aebfe55dacc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true when provided with an even negative number",
              "fullTitle": "isNumberEven should return true when provided with an even negative number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(-2);\nexpect(validationResults).to.be.true;",
              "err": {},
              "uuid": "723cb9d1-05c6-447d-8cf6-2de090970d8e",
              "parentUUID": "e8a3ff52-37f8-46a0-93d9-2aebfe55dacc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true when provided with an even negative decimal number",
              "fullTitle": "isNumberEven should return true when provided with an even negative decimal number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(-20);\nexpect(validationResults).to.be.true;",
              "err": {},
              "uuid": "c0e04f06-589a-453d-8635-4e2f02f545b9",
              "parentUUID": "e8a3ff52-37f8-46a0-93d9-2aebfe55dacc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true when provided with an even negative number more 100",
              "fullTitle": "isNumberEven should return true when provided with an even negative number more 100",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(-120);\nexpect(validationResults).to.be.true;",
              "err": {},
              "uuid": "44f4ae42-ca7a-40b1-bae3-671229394815",
              "parentUUID": "e8a3ff52-37f8-46a0-93d9-2aebfe55dacc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for even number in exponential notation (2e2)",
              "fullTitle": "isNumberEven should return true for even number in exponential notation (2e2)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(2e2);\nexpect(validationResults).to.be.true;",
              "err": {},
              "uuid": "bf8b4103-25b3-4c4e-8a51-b944eaf57d6a",
              "parentUUID": "e8a3ff52-37f8-46a0-93d9-2aebfe55dacc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for odd number in exponential notation (3e3)",
              "fullTitle": "isNumberEven should return true for odd number in exponential notation (3e3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(3e3);\nexpect(validationResults).to.be.true;",
              "err": {},
              "uuid": "f335f1ed-61df-4387-9a01-f3e098590496",
              "parentUUID": "e8a3ff52-37f8-46a0-93d9-2aebfe55dacc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for even number in exponential notation (2.5e2)",
              "fullTitle": "isNumberEven should return true for even number in exponential notation (2.5e2)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(2.5e2);\nexpect(validationResults).to.be.true;",
              "err": {},
              "uuid": "8d0613bc-39bd-4d43-baa1-5b0180744662",
              "parentUUID": "e8a3ff52-37f8-46a0-93d9-2aebfe55dacc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for even number in exponential notation (3.5e3)",
              "fullTitle": "isNumberEven should return true for even number in exponential notation (3.5e3)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(3.5e3);\nexpect(validationResults).to.be.true;",
              "err": {},
              "uuid": "4a321bc9-3c19-4e90-86c4-a6e347d8e2fe",
              "parentUUID": "e8a3ff52-37f8-46a0-93d9-2aebfe55dacc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false when provided with an odd number",
              "fullTitle": "isNumberEven should return false when provided with an odd number",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(5);\nexpect(validationResults).to.be.false;",
              "err": {},
              "uuid": "cba7334f-294e-4daf-8494-612b91705b93",
              "parentUUID": "e8a3ff52-37f8-46a0-93d9-2aebfe55dacc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if an odd non-integer number is specified",
              "fullTitle": "isNumberEven should return false if an odd non-integer number is specified",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(5.2);\nexpect(validationResults).to.be.false;",
              "err": {},
              "uuid": "f4fcbf0c-11da-4de2-8cf7-e04987570e34",
              "parentUUID": "e8a3ff52-37f8-46a0-93d9-2aebfe55dacc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if an even non-integer number is specified",
              "fullTitle": "isNumberEven should return false if an even non-integer number is specified",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(4.4);\nexpect(validationResults).to.be.false;",
              "err": {},
              "uuid": "b2624f32-9fc8-4fa3-8821-5ec18cbb71d1",
              "parentUUID": "e8a3ff52-37f8-46a0-93d9-2aebfe55dacc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided string",
              "fullTitle": "isNumberEven should throw an error when provided string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven('4');\n}).to.throw('[4] is not of type \"Number\" it is of type \"string\"');",
              "err": {},
              "uuid": "3ce97349-1334-4823-a638-d59a4e8c176b",
              "parentUUID": "e8a3ff52-37f8-46a0-93d9-2aebfe55dacc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for large odd number (1000000000000001)",
              "fullTitle": "isNumberEven should return false for large odd number (1000000000000001)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(1000000000000001);\nexpect(validationResults).to.be.false;",
              "err": {},
              "uuid": "a0e4343a-7ca8-44bb-90de-3cf9ffb67b2a",
              "parentUUID": "e8a3ff52-37f8-46a0-93d9-2aebfe55dacc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for Infinity",
              "fullTitle": "isNumberEven should return false for Infinity",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(Infinity);\nexpect(validationResults).to.be.false;",
              "err": {},
              "uuid": "46c825ef-8a64-4468-8bb6-20bf71d43b65",
              "parentUUID": "e8a3ff52-37f8-46a0-93d9-2aebfe55dacc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for -Infinity",
              "fullTitle": "isNumberEven should return false for -Infinity",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(-Infinity);\nexpect(validationResults).to.be.false;",
              "err": {},
              "uuid": "b8e38ed0-df24-47a2-9e61-c0ef7ae130b6",
              "parentUUID": "e8a3ff52-37f8-46a0-93d9-2aebfe55dacc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided empty string",
              "fullTitle": "isNumberEven should throw an error when provided empty string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven('');\n}).to.throw('[] is not of type \"Number\" it is of type \"string\"');",
              "err": {},
              "uuid": "d3d1989c-f32d-43ba-9f39-db715aaf111f",
              "parentUUID": "e8a3ff52-37f8-46a0-93d9-2aebfe55dacc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided nothing",
              "fullTitle": "isNumberEven should throw an error when provided nothing",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven();\n}).to.throw(\n    '[undefined] is not of type \"Number\" it is of type \"undefined\"',\n);",
              "err": {},
              "uuid": "b044321c-039b-4665-86b7-82a0a31c0fc7",
              "parentUUID": "e8a3ff52-37f8-46a0-93d9-2aebfe55dacc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided a boolean",
              "fullTitle": "isNumberEven should throw an error when provided a boolean",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven(true);\n}).to.throw('[true] is not of type \"Number\" it is of type \"boolean\"');",
              "err": {},
              "uuid": "3a422834-1692-4df2-b61f-41dfd30c7e91",
              "parentUUID": "e8a3ff52-37f8-46a0-93d9-2aebfe55dacc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided an object",
              "fullTitle": "isNumberEven should throw an error when provided an object",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven({value: 4});\n}).to.throw(\n    '[[object Object]] is not of type \"Number\" it is of type \"object\"',\n);",
              "err": {},
              "uuid": "acdbe63a-f3cf-4ade-959c-04d9da058a00",
              "parentUUID": "e8a3ff52-37f8-46a0-93d9-2aebfe55dacc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided a null",
              "fullTitle": "isNumberEven should throw an error when provided a null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven(null);\n}).to.throw(\n    '[null] is not of type \"Number\" it is of type \"object\"',\n);",
              "err": {},
              "uuid": "80ed866b-e48b-4ede-9ab9-c53c608f2f57",
              "parentUUID": "e8a3ff52-37f8-46a0-93d9-2aebfe55dacc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided a undefined",
              "fullTitle": "isNumberEven should throw an error when provided a undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven(undefined);\n}).to.throw(\n    '[undefined] is not of type \"Number\" it is of type \"undefined\"',\n);",
              "err": {},
              "uuid": "66ea912d-68e3-47c5-9e00-726cbd2b2fd4",
              "parentUUID": "e8a3ff52-37f8-46a0-93d9-2aebfe55dacc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided a BigInt",
              "fullTitle": "isNumberEven should throw an error when provided a BigInt",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  const bigIntValue = BigInt(10);\n  validator.isNumberEven(bigIntValue);\n}).to.throw(\n    `[10] is not of type \"Number\" it is of type \"bigint\"`,\n);",
              "err": {},
              "uuid": "79338fd1-6209-47f0-acdb-f4090a54f566",
              "parentUUID": "e8a3ff52-37f8-46a0-93d9-2aebfe55dacc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided an array",
              "fullTitle": "isNumberEven should throw an error when provided an array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven([4, 5, 6]);\n}).to.throw('[4,5,6] is not of type \"Number\" it is of type \"object\"');",
              "err": {},
              "uuid": "f30e5b41-a314-4f1d-9628-5f7b32c8344d",
              "parentUUID": "e8a3ff52-37f8-46a0-93d9-2aebfe55dacc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "27b2e916-e7b9-409f-bf39-91c4357a4aa2",
            "fe22105d-53f7-4f10-997f-b0ee7a0fd113",
            "fbce49b5-9dbd-4521-983d-5f48c0de8c72",
            "e4a6356f-76d3-4029-b863-56d90553fad4",
            "0494955c-a658-4701-91d9-dc2eadd10568",
            "723cb9d1-05c6-447d-8cf6-2de090970d8e",
            "c0e04f06-589a-453d-8635-4e2f02f545b9",
            "44f4ae42-ca7a-40b1-bae3-671229394815",
            "bf8b4103-25b3-4c4e-8a51-b944eaf57d6a",
            "f335f1ed-61df-4387-9a01-f3e098590496",
            "8d0613bc-39bd-4d43-baa1-5b0180744662",
            "4a321bc9-3c19-4e90-86c4-a6e347d8e2fe",
            "cba7334f-294e-4daf-8494-612b91705b93",
            "f4fcbf0c-11da-4de2-8cf7-e04987570e34",
            "b2624f32-9fc8-4fa3-8821-5ec18cbb71d1",
            "3ce97349-1334-4823-a638-d59a4e8c176b",
            "a0e4343a-7ca8-44bb-90de-3cf9ffb67b2a",
            "46c825ef-8a64-4468-8bb6-20bf71d43b65",
            "b8e38ed0-df24-47a2-9e61-c0ef7ae130b6",
            "d3d1989c-f32d-43ba-9f39-db715aaf111f",
            "b044321c-039b-4665-86b7-82a0a31c0fc7",
            "3a422834-1692-4df2-b61f-41dfd30c7e91",
            "acdbe63a-f3cf-4ade-959c-04d9da058a00",
            "80ed866b-e48b-4ede-9ab9-c53c608f2f57",
            "66ea912d-68e3-47c5-9e00-726cbd2b2fd4",
            "79338fd1-6209-47f0-acdb-f4090a54f566",
            "f30e5b41-a314-4f1d-9628-5f7b32c8344d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 24,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}