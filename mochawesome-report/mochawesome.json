{
  "stats": {
    "suites": 4,
    "tests": 59,
    "passes": 59,
    "pending": 0,
    "failures": 0,
    "start": "2024-03-31T16:48:38.438Z",
    "end": "2024-03-31T16:48:38.634Z",
    "duration": 196,
    "testsRegistered": 59,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "467ba0fb-77b0-4f29-abac-98c2a2da98f8",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "30b84eca-ea1e-4367-9fb4-ba8780713412",
          "title": "getEvenNumbersFromArray",
          "fullFile": "/Users/a222/WebstormProjects/unitTest/test/numbers-validator/getEvenNumbersFromArray.spec.js",
          "file": "/test/numbers-validator/getEvenNumbersFromArray.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"getEvenNumbersFromArray\"",
              "fullTitle": "getEvenNumbersFromArray \"before each\" hook in \"getEvenNumbersFromArray\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "27dd2e54-723e-47d0-aba2-81f2f3c80b1e",
              "parentUUID": "30b84eca-ea1e-4367-9fb4-ba8780713412",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"getEvenNumbersFromArray\"",
              "fullTitle": "getEvenNumbersFromArray \"after each\" hook in \"getEvenNumbersFromArray\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "d0fffdd6-04d5-48c2-adc8-2aa3ca1652fa",
              "parentUUID": "30b84eca-ea1e-4367-9fb4-ba8780713412",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "it should return an array of even number",
              "fullTitle": "getEvenNumbersFromArray it should return an array of even number",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayNumber = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst arrayNumberResult = validator.getEvenNumbersFromArray(arrayNumber);\nexpect(arrayNumberResult).to.be.deep.eq([2, 4, 6, 8]);",
              "err": {},
              "uuid": "60bbe384-21ea-4c58-86db-51aaf94de4f5",
              "parentUUID": "30b84eca-ea1e-4367-9fb4-ba8780713412",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "it should return an array of even number",
              "fullTitle": "getEvenNumbersFromArray it should return an array of even number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayNumber = [-2, -0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 9990];\nconst arrayNumberResult = validator.getEvenNumbersFromArray(arrayNumber);\nexpect(arrayNumberResult).to.be.deep.eq([-2, -0, 0, 2, 4, 6, 8, 10, 9990]);",
              "err": {},
              "uuid": "bdcc78f4-e0e7-441e-93ce-65e4cb0589fc",
              "parentUUID": "30b84eca-ea1e-4367-9fb4-ba8780713412",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "it should return an array of even number",
              "fullTitle": "getEvenNumbersFromArray it should return an array of even number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayNumber = [-2, -0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 9990];\nconst arrayNumberResult = validator.getEvenNumbersFromArray(arrayNumber);\nexpect(arrayNumberResult)\n    .to.have.all.members([-2, -0, 0, 2, 4, 6, 8, 10, 9990]);",
              "err": {},
              "uuid": "1b918530-b654-4ba6-914f-1c64e6380775",
              "parentUUID": "30b84eca-ea1e-4367-9fb4-ba8780713412",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "it should return an empty array",
              "fullTitle": "getEvenNumbersFromArray it should return an empty array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const emptyArrayResult = validator.getEvenNumbersFromArray([]);\nexpect(emptyArrayResult).to.be.eql([]);",
              "err": {},
              "uuid": "c6facdca-e786-4b11-986f-cec434b2a864",
              "parentUUID": "30b84eca-ea1e-4367-9fb4-ba8780713412",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an array of even numbers for negative numbers",
              "fullTitle": "getEvenNumbersFromArray should return an array of even numbers for negative numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayNumber = [-9, -8, -7, -6, -5, -4, -3, -2, -1];\nconst arrayNumberResult = validator.getEvenNumbersFromArray(arrayNumber);\nexpect(arrayNumberResult).to.be.deep.eq([-8, -6, -4, -2]);",
              "err": {},
              "uuid": "72013157-b12d-44b0-b085-07521488b2ea",
              "parentUUID": "30b84eca-ea1e-4367-9fb4-ba8780713412",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an array of even numbers for decimal numbers",
              "fullTitle": "getEvenNumbersFromArray should return an array of even numbers for decimal numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayNumber = [1.5, 2, 3.8, 4.3, 5.6];\nconst arrayNumberResult = validator.getEvenNumbersFromArray(arrayNumber);\nexpect(arrayNumberResult).to.be.deep.eq([2]);",
              "err": {},
              "uuid": "0ed4214c-9d2c-4555-957a-90aaa375c195",
              "parentUUID": "30b84eca-ea1e-4367-9fb4-ba8780713412",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an empty array when provided NaN and Infinity",
              "fullTitle": "getEvenNumbersFromArray should return an empty array when provided NaN and Infinity",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayNumber = [NaN, Infinity];\nconst arrayNumberResult = validator.getEvenNumbersFromArray(arrayNumber);\nexpect(arrayNumberResult).to.eql([]);",
              "err": {},
              "uuid": "a8851dce-dca8-4e96-a401-63c456754e48",
              "parentUUID": "30b84eca-ea1e-4367-9fb4-ba8780713412",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided string in array",
              "fullTitle": "getEvenNumbersFromArray should throw an error when provided string in array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayNumber = [1, '2', 3, 4, 5, 6, 7, 8, 9];\nexpect(() => {\n  validator.getEvenNumbersFromArray(arrayNumber);\n}).to.throw(`[${arrayNumber}] is not an array of \"Numbers\"`);",
              "err": {},
              "uuid": "54e72ff5-5de9-4792-ac47-80df4be17265",
              "parentUUID": "30b84eca-ea1e-4367-9fb4-ba8780713412",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided mixed value in array",
              "fullTitle": "getEvenNumbersFromArray should throw an error when provided mixed value in array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayNumber = [1, '2', 3, true, 5, 6, false, null, {value: 9}];\nexpect(() => {\n  validator.getEvenNumbersFromArray(arrayNumber);\n}).to.throw(\n    `[${arrayNumber}] is not an array of \"Numbers\"`,\n);",
              "err": {},
              "uuid": "87ceeb30-60a5-41cd-99b2-7da9895e5e51",
              "parentUUID": "30b84eca-ea1e-4367-9fb4-ba8780713412",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "60bbe384-21ea-4c58-86db-51aaf94de4f5",
            "bdcc78f4-e0e7-441e-93ce-65e4cb0589fc",
            "1b918530-b654-4ba6-914f-1c64e6380775",
            "c6facdca-e786-4b11-986f-cec434b2a864",
            "72013157-b12d-44b0-b085-07521488b2ea",
            "0ed4214c-9d2c-4555-957a-90aaa375c195",
            "a8851dce-dca8-4e96-a401-63c456754e48",
            "54e72ff5-5de9-4792-ac47-80df4be17265",
            "87ceeb30-60a5-41cd-99b2-7da9895e5e51"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fc63e89d-a113-455e-8a93-c326f8954938",
          "title": "isAllNumbers",
          "fullFile": "/Users/a222/WebstormProjects/unitTest/test/numbers-validator/isAllNumbers.spec.js",
          "file": "/test/numbers-validator/isAllNumbers.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isAllNumbers\"",
              "fullTitle": "isAllNumbers \"before each\" hook in \"isAllNumbers\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "76ea7ad2-cd80-4c41-be38-6f3215fc13bf",
              "parentUUID": "fc63e89d-a113-455e-8a93-c326f8954938",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isAllNumbers\"",
              "fullTitle": "isAllNumbers \"after each\" hook in \"isAllNumbers\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "a5a1efd3-03dc-4118-930f-62ccf08e4eaa",
              "parentUUID": "fc63e89d-a113-455e-8a93-c326f8954938",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true when provided array with number",
              "fullTitle": "isAllNumbers should return true when provided array with number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayNumber = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst arrayNumberResult = validator.isAllNumbers(arrayNumber);\nexpect(arrayNumberResult).to.be.true;",
              "err": {},
              "uuid": "0627f2f8-c379-40fd-a910-2d9acd39f7c5",
              "parentUUID": "fc63e89d-a113-455e-8a93-c326f8954938",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true when provided an empty array",
              "fullTitle": "isAllNumbers should return true when provided an empty array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const emptyArray = [];\nconst result = validator.isAllNumbers(emptyArray);\nexpect(result).to.be.true;",
              "err": {},
              "uuid": "7722778a-3b87-4220-89ac-f6100ea057aa",
              "parentUUID": "fc63e89d-a113-455e-8a93-c326f8954938",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true when provided an array with empty elements",
              "fullTitle": "isAllNumbers should return true when provided an array with empty elements",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayWithEmptyElements = [1, 2, , 4, 5];\nconst result = validator.isAllNumbers(arrayWithEmptyElements);\nexpect(result).to.be.true;",
              "err": {},
              "uuid": "9b2f4c98-a9ab-43bb-b01a-7392b1361d91",
              "parentUUID": "fc63e89d-a113-455e-8a93-c326f8954938",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true when provided an array with zero elements",
              "fullTitle": "isAllNumbers should return true when provided an array with zero elements",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayWithZeroElements = [1, 2, 0, 4, 5];\nconst result = validator.isAllNumbers(arrayWithZeroElements);\nexpect(result).to.be.true;",
              "err": {},
              "uuid": "dbf7e37f-d272-48d4-9a1d-6a88c749f2db",
              "parentUUID": "fc63e89d-a113-455e-8a93-c326f8954938",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true when provided an array with negative numbers",
              "fullTitle": "isAllNumbers should return true when provided an array with negative numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayNegativeNumbers = [-1, -2, -3, -4, -5];\nconst result = validator.isAllNumbers(arrayNegativeNumbers);\nexpect(result).to.be.true;",
              "err": {},
              "uuid": "cbafd51c-396e-4e24-8aad-6ad59d591844",
              "parentUUID": "fc63e89d-a113-455e-8a93-c326f8954938",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true when provided an array with decimal numbers",
              "fullTitle": "isAllNumbers should return true when provided an array with decimal numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayDecimalNumbers = [1.5, 2.7, 3.8, 4.1, 5.9];\nconst result = validator.isAllNumbers(arrayDecimalNumbers);\nexpect(result).to.be.true;",
              "err": {},
              "uuid": "f6bd7247-c388-4b81-9d26-1725b1964230",
              "parentUUID": "fc63e89d-a113-455e-8a93-c326f8954938",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false when provided an array with mixed data types",
              "fullTitle": "isAllNumbers should return false when provided an array with mixed data types",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mixedArray = [1, '2', 3, 4, true];\nconst result = validator.isAllNumbers(mixedArray);\nexpect(result).to.be.false;",
              "err": {},
              "uuid": "bc38df5d-2ad2-4261-a916-1a0fbc866248",
              "parentUUID": "fc63e89d-a113-455e-8a93-c326f8954938",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided null",
              "fullTitle": "isAllNumbers should throw an error when provided null",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() =>\n  validator.isAllNumbers(null)).to.throw('[null] is not an array');",
              "err": {},
              "uuid": "5cb8f500-87e2-4f7e-833c-e8f1211e2ba9",
              "parentUUID": "fc63e89d-a113-455e-8a93-c326f8954938",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided boolean",
              "fullTitle": "isAllNumbers should throw an error when provided boolean",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() =>\n  validator.isAllNumbers(true)).to.throw('[true] is not an array');",
              "err": {},
              "uuid": "6d98279d-4399-4476-9bd6-c1b43ae22714",
              "parentUUID": "fc63e89d-a113-455e-8a93-c326f8954938",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided undefined",
              "fullTitle": "isAllNumbers should throw an error when provided undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() =>\n  validator.isAllNumbers(undefined))\n    .to.throw('[undefined] is not an array');",
              "err": {},
              "uuid": "bf6af958-bbcf-4a4d-bf6f-7c1715a464eb",
              "parentUUID": "fc63e89d-a113-455e-8a93-c326f8954938",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided object",
              "fullTitle": "isAllNumbers should throw an error when provided object",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const emptyObject = {};\nexpect(() =>\n  validator.isAllNumbers(emptyObject))\n    .to.throw('[[object Object]] is not an array');",
              "err": {},
              "uuid": "97f45cdc-1a6f-4a94-92f4-edef502ab3b5",
              "parentUUID": "fc63e89d-a113-455e-8a93-c326f8954938",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided string",
              "fullTitle": "isAllNumbers should throw an error when provided string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const arrayNumber = '2';\nexpect(() =>\n  validator.isAllNumbers(arrayNumber))\n    .to.throw(`[${arrayNumber}] is not an array`);",
              "err": {},
              "uuid": "9613cfa9-2d96-4cd4-94a0-d846771a4f58",
              "parentUUID": "fc63e89d-a113-455e-8a93-c326f8954938",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided nothing",
              "fullTitle": "isAllNumbers should throw an error when provided nothing",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() =>\n  validator.isAllNumbers()).to.throw('[undefined] is not an array');",
              "err": {},
              "uuid": "4161b336-37e7-4c54-9d81-9b02a2773ea6",
              "parentUUID": "fc63e89d-a113-455e-8a93-c326f8954938",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0627f2f8-c379-40fd-a910-2d9acd39f7c5",
            "7722778a-3b87-4220-89ac-f6100ea057aa",
            "9b2f4c98-a9ab-43bb-b01a-7392b1361d91",
            "dbf7e37f-d272-48d4-9a1d-6a88c749f2db",
            "cbafd51c-396e-4e24-8aad-6ad59d591844",
            "f6bd7247-c388-4b81-9d26-1725b1964230",
            "bc38df5d-2ad2-4261-a916-1a0fbc866248",
            "5cb8f500-87e2-4f7e-833c-e8f1211e2ba9",
            "6d98279d-4399-4476-9bd6-c1b43ae22714",
            "bf6af958-bbcf-4a4d-bf6f-7c1715a464eb",
            "97f45cdc-1a6f-4a94-92f4-edef502ab3b5",
            "9613cfa9-2d96-4cd4-94a0-d846771a4f58",
            "4161b336-37e7-4c54-9d81-9b02a2773ea6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "632d6c95-4b97-411e-9854-4517a62031ad",
          "title": "isInteger",
          "fullFile": "/Users/a222/WebstormProjects/unitTest/test/numbers-validator/isInteger.spec.js",
          "file": "/test/numbers-validator/isInteger.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isInteger\"",
              "fullTitle": "isInteger \"before each\" hook in \"isInteger\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "61443450-1b0b-4612-8f8b-358689c10fce",
              "parentUUID": "632d6c95-4b97-411e-9854-4517a62031ad",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isInteger\"",
              "fullTitle": "isInteger \"after each\" hook in \"isInteger\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "957f711a-2f74-4643-8a46-dac7845c24db",
              "parentUUID": "632d6c95-4b97-411e-9854-4517a62031ad",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true if input is an integer",
              "fullTitle": "isInteger should return true if input is an integer",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = 42;\nexpect(validator.isInteger(input)).to.be.true;",
              "err": {},
              "uuid": "8db91732-a05c-4ec0-a98e-2450a7cf654f",
              "parentUUID": "632d6c95-4b97-411e-9854-4517a62031ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true if input is a negative integer",
              "fullTitle": "isInteger should return true if input is a negative integer",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = -42;\nexpect(validator.isInteger(input)).to.be.true;",
              "err": {},
              "uuid": "c6ff2f15-3e26-4ecb-8dcd-1c47a1cd7bce",
              "parentUUID": "632d6c95-4b97-411e-9854-4517a62031ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true if input is zero",
              "fullTitle": "isInteger should return true if input is zero",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = 0;\nexpect(validator.isInteger(input)).to.be.true;",
              "err": {},
              "uuid": "0d990258-16f5-4ad1-8b5f-2ad6ba3dc929",
              "parentUUID": "632d6c95-4b97-411e-9854-4517a62031ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true if input is -0",
              "fullTitle": "isInteger should return true if input is -0",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = -0;\nexpect(validator.isInteger(input)).to.be.true;",
              "err": {},
              "uuid": "d39af240-6d9e-46af-812e-b222e82ff2cc",
              "parentUUID": "632d6c95-4b97-411e-9854-4517a62031ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for large integer",
              "fullTitle": "isInteger should return true for large integer",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = 9007199254740992;\nexpect(validator.isInteger(input)).to.be.true;",
              "err": {},
              "uuid": "74bdd5c7-3058-4656-96a4-a117248037a3",
              "parentUUID": "632d6c95-4b97-411e-9854-4517a62031ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if input is a decimal number",
              "fullTitle": "isInteger should return false if input is a decimal number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = 3.14;\nexpect(validator.isInteger(input)).to.be.false;",
              "err": {},
              "uuid": "a8832cb7-60e4-43a8-8a69-d3ea9edf0646",
              "parentUUID": "632d6c95-4b97-411e-9854-4517a62031ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if input is an object",
              "fullTitle": "isInteger should throw an error if input is an object",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = {value: 42};\nexpect(() => validator.isInteger(input))\n    .to.throw(Error, `[${input}] is not a number`);",
              "err": {},
              "uuid": "b7d0787f-9fd6-4eb3-840f-65656ed21167",
              "parentUUID": "632d6c95-4b97-411e-9854-4517a62031ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if input is an array",
              "fullTitle": "isInteger should throw an error if input is an array",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = [42];\nexpect(() => validator.isInteger(input))\n    .to.throw(Error, `[${input}] is not a number`);",
              "err": {},
              "uuid": "05eb227b-67ea-4ba5-8604-429a5a4051ec",
              "parentUUID": "632d6c95-4b97-411e-9854-4517a62031ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error if input is not a number",
              "fullTitle": "isInteger should throw an error if input is not a number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const input = 'not a number';\nexpect(() =>\n  validator.isInteger(input)).to.throw(Error, `[${input}] is not a number`);",
              "err": {},
              "uuid": "068ace55-7d07-4ab8-aa1d-30ebfb872553",
              "parentUUID": "632d6c95-4b97-411e-9854-4517a62031ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if input is Infinity",
              "fullTitle": "isInteger should return false if input is Infinity",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(validator.isInteger(Infinity)).to.be.false;",
              "err": {},
              "uuid": "4f66fd7f-0674-4e51-a7fd-3c4d9bc55a8b",
              "parentUUID": "632d6c95-4b97-411e-9854-4517a62031ad",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8db91732-a05c-4ec0-a98e-2450a7cf654f",
            "c6ff2f15-3e26-4ecb-8dcd-1c47a1cd7bce",
            "0d990258-16f5-4ad1-8b5f-2ad6ba3dc929",
            "d39af240-6d9e-46af-812e-b222e82ff2cc",
            "74bdd5c7-3058-4656-96a4-a117248037a3",
            "a8832cb7-60e4-43a8-8a69-d3ea9edf0646",
            "b7d0787f-9fd6-4eb3-840f-65656ed21167",
            "05eb227b-67ea-4ba5-8604-429a5a4051ec",
            "068ace55-7d07-4ab8-aa1d-30ebfb872553",
            "4f66fd7f-0674-4e51-a7fd-3c4d9bc55a8b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0d1839c2-fc36-44fd-945a-41dc361e33f7",
          "title": "isNumberEven",
          "fullFile": "/Users/a222/WebstormProjects/unitTest/test/numbers-validator/isNumberEven.spec.js",
          "file": "/test/numbers-validator/isNumberEven.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isNumberEven\"",
              "fullTitle": "isNumberEven \"before each\" hook in \"isNumberEven\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "f97791a5-566a-4cf6-9943-53588e5e5d45",
              "parentUUID": "0d1839c2-fc36-44fd-945a-41dc361e33f7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isNumberEven\"",
              "fullTitle": "isNumberEven \"after each\" hook in \"isNumberEven\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "f7ee4a88-e3a4-41c7-b06f-6f7a21df07e3",
              "parentUUID": "0d1839c2-fc36-44fd-945a-41dc361e33f7",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true when provided with an even number",
              "fullTitle": "isNumberEven should return true when provided with an even number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(4);\nexpect(validationResults).to.be.true;",
              "err": {},
              "uuid": "fc21c24c-bba8-487e-bd04-27398da0ead6",
              "parentUUID": "0d1839c2-fc36-44fd-945a-41dc361e33f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true when provided with an even decimal number",
              "fullTitle": "isNumberEven should return true when provided with an even decimal number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(50);\nexpect(validationResults).to.be.true;",
              "err": {},
              "uuid": "850b0120-5d2c-4e76-a1ca-60961a900b5b",
              "parentUUID": "0d1839c2-fc36-44fd-945a-41dc361e33f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true when provided with an even number more 100",
              "fullTitle": "isNumberEven should return true when provided with an even number more 100",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(102);\nexpect(validationResults).to.be.true;",
              "err": {},
              "uuid": "05cf6a34-7359-422a-9a3b-7b222f1995d8",
              "parentUUID": "0d1839c2-fc36-44fd-945a-41dc361e33f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for large even number (1000000000000000)",
              "fullTitle": "isNumberEven should return true for large even number (1000000000000000)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(1000000000000000);\nexpect(validationResults).to.be.true;",
              "err": {},
              "uuid": "25e50d68-e5b7-42be-acdf-db5c93f69665",
              "parentUUID": "0d1839c2-fc36-44fd-945a-41dc361e33f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for zero",
              "fullTitle": "isNumberEven should return true for zero",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(0);\nexpect(validationResults).to.be.true;",
              "err": {},
              "uuid": "6c94e49a-2048-4760-a3d8-f8db2089c274",
              "parentUUID": "0d1839c2-fc36-44fd-945a-41dc361e33f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true when provided with an even negative number",
              "fullTitle": "isNumberEven should return true when provided with an even negative number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(-2);\nexpect(validationResults).to.be.true;",
              "err": {},
              "uuid": "c0a8a31a-2a08-4945-ad5c-84bc08ae9bc4",
              "parentUUID": "0d1839c2-fc36-44fd-945a-41dc361e33f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true when provided with an even negative decimal number",
              "fullTitle": "isNumberEven should return true when provided with an even negative decimal number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(-20);\nexpect(validationResults).to.be.true;",
              "err": {},
              "uuid": "d11394ff-6656-425c-9225-02dd37b52fcd",
              "parentUUID": "0d1839c2-fc36-44fd-945a-41dc361e33f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true when provided with an even negative number more 100",
              "fullTitle": "isNumberEven should return true when provided with an even negative number more 100",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(-120);\nexpect(validationResults).to.be.true;",
              "err": {},
              "uuid": "f5317637-27a3-4441-9c98-3b035610d55a",
              "parentUUID": "0d1839c2-fc36-44fd-945a-41dc361e33f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for even number in exponential notation (2e2)",
              "fullTitle": "isNumberEven should return true for even number in exponential notation (2e2)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(2e2);\nexpect(validationResults).to.be.true;",
              "err": {},
              "uuid": "e9dfd828-0d83-4cb1-a21b-0563ab990fd7",
              "parentUUID": "0d1839c2-fc36-44fd-945a-41dc361e33f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for odd number in exponential notation (3e3)",
              "fullTitle": "isNumberEven should return true for odd number in exponential notation (3e3)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(3e3);\nexpect(validationResults).to.be.true;",
              "err": {},
              "uuid": "a279d732-0150-4b83-be8a-b3f3d7466e5e",
              "parentUUID": "0d1839c2-fc36-44fd-945a-41dc361e33f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for even number in exponential notation (2.5e2)",
              "fullTitle": "isNumberEven should return true for even number in exponential notation (2.5e2)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(2.5e2);\nexpect(validationResults).to.be.true;",
              "err": {},
              "uuid": "9193fa55-755b-4a4b-a1fa-4f93a8d5f6ec",
              "parentUUID": "0d1839c2-fc36-44fd-945a-41dc361e33f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return true for even number in exponential notation (3.5e3)",
              "fullTitle": "isNumberEven should return true for even number in exponential notation (3.5e3)",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(3.5e3);\nexpect(validationResults).to.be.true;",
              "err": {},
              "uuid": "cb165a51-dfa5-4db4-8da5-9828de9bb1d1",
              "parentUUID": "0d1839c2-fc36-44fd-945a-41dc361e33f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false when provided with an odd number",
              "fullTitle": "isNumberEven should return false when provided with an odd number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(5);\nexpect(validationResults).to.be.false;",
              "err": {},
              "uuid": "c1172817-976f-45b1-9639-756751163b58",
              "parentUUID": "0d1839c2-fc36-44fd-945a-41dc361e33f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if an odd non-integer number is specified",
              "fullTitle": "isNumberEven should return false if an odd non-integer number is specified",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(5.2);\nexpect(validationResults).to.be.false;",
              "err": {},
              "uuid": "b23b6b6b-6269-47bc-b8c6-66549e29c808",
              "parentUUID": "0d1839c2-fc36-44fd-945a-41dc361e33f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false if an even non-integer number is specified",
              "fullTitle": "isNumberEven should return false if an even non-integer number is specified",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(4.4);\nexpect(validationResults).to.be.false;",
              "err": {},
              "uuid": "776ae5c6-6aa7-41b4-85d0-fd72eea51d14",
              "parentUUID": "0d1839c2-fc36-44fd-945a-41dc361e33f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided string",
              "fullTitle": "isNumberEven should throw an error when provided string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven('4');\n}).to.throw('[4] is not of type \"Number\" it is of type \"string\"');",
              "err": {},
              "uuid": "b60515c9-cee0-4b11-96a6-102cb0744a73",
              "parentUUID": "0d1839c2-fc36-44fd-945a-41dc361e33f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for large odd number (1000000000000001)",
              "fullTitle": "isNumberEven should return false for large odd number (1000000000000001)",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(1000000000000001);\nexpect(validationResults).to.be.false;",
              "err": {},
              "uuid": "6cf0a940-546d-4012-89df-32525b7325a7",
              "parentUUID": "0d1839c2-fc36-44fd-945a-41dc361e33f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for Infinity",
              "fullTitle": "isNumberEven should return false for Infinity",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(Infinity);\nexpect(validationResults).to.be.false;",
              "err": {},
              "uuid": "f34c719d-0eaa-4bde-8c11-72ad4afe769b",
              "parentUUID": "0d1839c2-fc36-44fd-945a-41dc361e33f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false for -Infinity",
              "fullTitle": "isNumberEven should return false for -Infinity",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResults = validator.isNumberEven(-Infinity);\nexpect(validationResults).to.be.false;",
              "err": {},
              "uuid": "033be827-6985-4480-80e2-23ac257af28c",
              "parentUUID": "0d1839c2-fc36-44fd-945a-41dc361e33f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided empty string",
              "fullTitle": "isNumberEven should throw an error when provided empty string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven('');\n}).to.throw('[] is not of type \"Number\" it is of type \"string\"');",
              "err": {},
              "uuid": "6e8f9e2c-c0b6-4530-954c-e76f9f831eef",
              "parentUUID": "0d1839c2-fc36-44fd-945a-41dc361e33f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided nothing",
              "fullTitle": "isNumberEven should throw an error when provided nothing",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven();\n}).to.throw(\n    '[undefined] is not of type \"Number\" it is of type \"undefined\"',\n);",
              "err": {},
              "uuid": "478e4854-fd97-439e-aad4-23392b46dea3",
              "parentUUID": "0d1839c2-fc36-44fd-945a-41dc361e33f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided a boolean",
              "fullTitle": "isNumberEven should throw an error when provided a boolean",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven(true);\n}).to.throw('[true] is not of type \"Number\" it is of type \"boolean\"');",
              "err": {},
              "uuid": "16ef66d5-54f0-4275-8b9e-187f1660a880",
              "parentUUID": "0d1839c2-fc36-44fd-945a-41dc361e33f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided an object",
              "fullTitle": "isNumberEven should throw an error when provided an object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven({value: 4});\n}).to.throw(\n    '[[object Object]] is not of type \"Number\" it is of type \"object\"',\n);",
              "err": {},
              "uuid": "cf6a2bcb-5ad2-4e84-b785-059dda2f0b32",
              "parentUUID": "0d1839c2-fc36-44fd-945a-41dc361e33f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided a null",
              "fullTitle": "isNumberEven should throw an error when provided a null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven(null);\n}).to.throw(\n    '[null] is not of type \"Number\" it is of type \"object\"',\n);",
              "err": {},
              "uuid": "c689b619-0842-4add-8b5e-661d7fbd1e1d",
              "parentUUID": "0d1839c2-fc36-44fd-945a-41dc361e33f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided a undefined",
              "fullTitle": "isNumberEven should throw an error when provided a undefined",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven(undefined);\n}).to.throw(\n    '[undefined] is not of type \"Number\" it is of type \"undefined\"',\n);",
              "err": {},
              "uuid": "a7aaa97f-a6db-45d5-a9b7-21255341cc44",
              "parentUUID": "0d1839c2-fc36-44fd-945a-41dc361e33f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided a BigInt",
              "fullTitle": "isNumberEven should throw an error when provided a BigInt",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  const bigIntValue = BigInt(10);\n  validator.isNumberEven(bigIntValue);\n}).to.throw(\n    `[10] is not of type \"Number\" it is of type \"bigint\"`,\n);",
              "err": {},
              "uuid": "8b76c68e-6c44-4b98-a478-eb5fff3043af",
              "parentUUID": "0d1839c2-fc36-44fd-945a-41dc361e33f7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should throw an error when provided an array",
              "fullTitle": "isNumberEven should throw an error when provided an array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven([4, 5, 6]);\n}).to.throw('[4,5,6] is not of type \"Number\" it is of type \"object\"');",
              "err": {},
              "uuid": "c66d61d1-e9e0-4107-a499-4668f553d977",
              "parentUUID": "0d1839c2-fc36-44fd-945a-41dc361e33f7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fc21c24c-bba8-487e-bd04-27398da0ead6",
            "850b0120-5d2c-4e76-a1ca-60961a900b5b",
            "05cf6a34-7359-422a-9a3b-7b222f1995d8",
            "25e50d68-e5b7-42be-acdf-db5c93f69665",
            "6c94e49a-2048-4760-a3d8-f8db2089c274",
            "c0a8a31a-2a08-4945-ad5c-84bc08ae9bc4",
            "d11394ff-6656-425c-9225-02dd37b52fcd",
            "f5317637-27a3-4441-9c98-3b035610d55a",
            "e9dfd828-0d83-4cb1-a21b-0563ab990fd7",
            "a279d732-0150-4b83-be8a-b3f3d7466e5e",
            "9193fa55-755b-4a4b-a1fa-4f93a8d5f6ec",
            "cb165a51-dfa5-4db4-8da5-9828de9bb1d1",
            "c1172817-976f-45b1-9639-756751163b58",
            "b23b6b6b-6269-47bc-b8c6-66549e29c808",
            "776ae5c6-6aa7-41b4-85d0-fd72eea51d14",
            "b60515c9-cee0-4b11-96a6-102cb0744a73",
            "6cf0a940-546d-4012-89df-32525b7325a7",
            "f34c719d-0eaa-4bde-8c11-72ad4afe769b",
            "033be827-6985-4480-80e2-23ac257af28c",
            "6e8f9e2c-c0b6-4530-954c-e76f9f831eef",
            "478e4854-fd97-439e-aad4-23392b46dea3",
            "16ef66d5-54f0-4275-8b9e-187f1660a880",
            "cf6a2bcb-5ad2-4e84-b785-059dda2f0b32",
            "c689b619-0842-4add-8b5e-661d7fbd1e1d",
            "a7aaa97f-a6db-45d5-a9b7-21255341cc44",
            "8b76c68e-6c44-4b98-a478-eb5fff3043af",
            "c66d61d1-e9e0-4107-a499-4668f553d977"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 19,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}